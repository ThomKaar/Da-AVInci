{"remainingRequest":"/mnt/c/users/kenak/documents/1CALPOLY/art/Da-AVInci/my-app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/mnt/c/users/kenak/documents/1CALPOLY/art/Da-AVInci/my-app/node_modules/vuetify-loader/lib/loader.js!/mnt/c/users/kenak/documents/1CALPOLY/art/Da-AVInci/my-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/mnt/c/users/kenak/documents/1CALPOLY/art/Da-AVInci/my-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/c/users/kenak/documents/1CALPOLY/art/Da-AVInci/my-app/src/components/edit/ImageOrganizer.vue?vue&type=template&id=4966970e&scoped=true&","dependencies":[{"path":"/mnt/c/users/kenak/documents/1CALPOLY/art/Da-AVInci/my-app/src/components/edit/ImageOrganizer.vue","mtime":1603333265590},{"path":"/mnt/c/users/kenak/documents/1CALPOLY/art/Da-AVInci/my-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/users/kenak/documents/1CALPOLY/art/Da-AVInci/my-app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/mnt/c/users/kenak/documents/1CALPOLY/art/Da-AVInci/my-app/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/mnt/c/users/kenak/documents/1CALPOLY/art/Da-AVInci/my-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/users/kenak/documents/1CALPOLY/art/Da-AVInci/my-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}